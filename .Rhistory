b.hosp = c(i);
}
}
for (i in 1:n) {
message(i)
if (rate[i] == rate[champ]) {
b.hosp = append(b.hosp, i);
}
if (rate[i] < rate[champ]) {
champ = i;
b.hosp = c(i);
}
}
for (i in 1:n) {
message(i)
if (rate[i] == rate[champ]) {
b.hosp = append(b.hosp, i);
}
if (rate[i] < rate[champ]) {
champ = i;
b.hosp = c(i);
}
}
for (i in 1:n) {
message(i)
if (1 < 2) {
b.hosp = append(b.hosp, i);
}
}
length(b.hosp)
for (i in 1:10) {
message(i)
if () {
b.hosp = append(b.hosp, i);
}
}
for (i in 1:10) {
message(rate[i])
if (is.numeric(rate[i])) {
b.hosp = append(b.hosp, i);
}
}
b.hosp = c();
for (i in 1:10) {
message(rate[i])
if (is.numeric(rate[i])) {
b.hosp = append(b.hosp, i);
}
}
b.hosp
for (i in 1:10) {
message(rate[i])
if (is.numeric(rate[i]) && 1 < 2) {
b.hosp = append(b.hosp, i);
}
}
b.hosp
b.hosp = c();
for (i in 1:n) {
if (is.numeric(rate[i])){
if (rate[i] == rate[champ]) {
b.hosp = append(b.hosp, i);
}
if (rate[i] < rate[champ]) {
champ = i;
b.hosp = c(i);
}
}
}
for (i in 1:n) {
if (is.numeric(rate[i])){
#if (rate[i] == rate[champ]) {
#    b.hosp = append(b.hosp, i);
#}
#if (rate[i] < rate[champ]) {
#    champ = i;
#    b.hosp = c(i);
}
}
}
for (i in 1:n) {
if (is.numeric(rate[i])){
#if (rate[i] == rate[champ]) {
#    b.hosp = append(b.hosp, i);
#}
#if (rate[i] < rate[champ]) {
#    champ = i;
#    b.hosp = c(i);
}
}
for (i in 1:10) {
if (is.numeric(rate[i])){
message(rate[i])
#if (rate[i] == rate[champ]) {
#    b.hosp = append(b.hosp, i);
#}
#if (rate[i] < rate[champ]) {
#    champ = i;
#    b.hosp = c(i);
}
}
champ
rate[champ]
champ = 2
rate[champ]
champ = 0
champ
for (j in 1:n) {
if (is.numeric(rate[i])) {
champ = i;
break;
}
}
champ
?break
head(rate)
for (j in 1:n) {
if (is.numeric(rate[i])) {
message(rate[i])
champ = i;
break;
}
}
for (j in 1:n) {
if (is.numeric(rate[i])) {
message(rate[i])
champ = i;
break;
}
}
champ
champ = 0
for (j in 1:n) {
if (is.numeric(rate[i])) {
message(rate[i])
champ = i;
break;
}
}
champ
rate[1]
for (j in 1:n) {
message(rate[i])
if (is.numeric(rate[i])) {
champ = i;
break;
}
}
for (j in 1:n) {
message(rate[i])
if (is.numeric(rate[i])) {
champ = i;
break;
}
}
champ
outcome[11][1,1]
outcome[17][1,1]
outcome[23][1,1]
idx = 23
rate = as.numeric(outcome[idx][, 1]);
head(rate)
rate[500]
for (i in 1:10) {
if (is.numeric(rate[i])){
message(rate[i]);
if (rate[i] == rate[champ]) {
message("rate[i] == rate[champ]");
#    b.hosp = append(b.hosp, i);
}
if (rate[i] < rate[champ]) {
message("rate[i] < rate[champ]")
#    champ = i;
#    b.hosp = c(i);
}
}
}
for (i in 1:10) {
if (is.numeric(rate[i])){
message(rate[i]);
if (rate[i] == rate[champ]) {
message("rate[i] == rate[champ]");
#    b.hosp = append(b.hosp, i);
}
if (rate[i] < rate[champ]) {
message("rate[i] < rate[champ]")
#    champ = i;
#    b.hosp = c(i);
}
}
}
head(rate)
for (i in 1:10) {
if (is.numeric(rate[i])){
message(rate[i]);
if (rate[i] == 13.4) {
message("rate[i] == rate[champ]");
#    b.hosp = append(b.hosp, i);
}
if (rate[i] < 20) {
message("rate[i] < rate[champ]")
#    champ = i;
#    b.hosp = c(i);
}
}
}
champ
champ = 1
head(rate)
for (i in 1:10) {
if (is.numeric(rate[i])){
message("rate[i]");
message(rate[i]);
message("rate[champ]")
message(rate[champ])
if (rate[i] == 10.9) {
message("rate[i] == rate[champ]");
#    b.hosp = append(b.hosp, i);
}
if (rate[i] < 10.9) {
message("rate[i] < rate[champ]")
#    champ = i;
#    b.hosp = c(i);
}
}
}
champ = 1
for (i in 1:10) {
if (is.numeric(rate[i])){
message("rate[i]");
message(rate[i]);
message("rate[champ]")
message(rate[champ])
if (rate[i] == rate[champ]) {
message("rate[i] == rate[champ]");
#    b.hosp = append(b.hosp, i);
}
if (rate[i] < rate[champ]) {
message("rate[i] < rate[champ]")
#    champ = i;
#    b.hosp = c(i);
}
}
for (i in 1:10) {
if (is.numeric(rate[i])){
message("rate[i]");
message(rate[i]);
message("rate[champ]")
message(rate[champ])
if (rate[i] == rate[champ]) {
message("rate[i] == rate[champ]");
#    b.hosp = append(b.hosp, i);
}
if (rate[i] < rate[champ]) {
message("rate[i] < rate[champ]")
#    champ = i;
#    b.hosp = c(i);
}
}
for (i in 1:10) {
if (is.numeric(rate[i])){
message("rate[i]");
message(rate[i]);
message("rate[champ]")
message(rate[champ])
if (rate[i] == rate[champ]) {
message("rate[i] == rate[champ]");
#    b.hosp = append(b.hosp, i);
}
if (rate[i] < rate[champ]) {
message("rate[i] < rate[champ]")
#    champ = i;
#    b.hosp = c(i);
}
}
for (i in 1:10) {
if (is.numeric(rate[i])){
message("rate[i]");
message(rate[i]);
message("rate[champ]")
message(rate[champ])
if (rate[i] == rate[champ]) {
message("rate[i] == rate[champ]");
#    b.hosp = append(b.hosp, i);
}
if (rate[i] < rate[champ]) {
message("rate[i] < rate[champ]")
#    champ = i;
#    b.hosp = c(i);
}
}
for (i in 1:10) {
if (is.numeric(rate[i])){
message("rate[i]");
message(rate[i]);
message("rate[champ]")
message(rate[champ])
if (rate[i] == rate[champ]) {
message("rate[i] == rate[champ]");
#    b.hosp = append(b.hosp, i);
}
if (rate[i] < rate[champ]) {
message("rate[i] < rate[champ]")
#    champ = i;
#    b.hosp = c(i);
}
}
}
is.numeric("NA")
is.numeric(NA)
for (i in 1:10) {
if (!is.na(rate[i])){
message("rate[i]");
message(rate[i]);
message("rate[champ]")
message(rate[champ])
if (rate[i] == rate[champ]) {
message("rate[i] == rate[champ]");
#    b.hosp = append(b.hosp, i);
}
if (rate[i] < rate[champ]) {
message("rate[i] < rate[champ]")
#    champ = i;
#    b.hosp = c(i);
}
}
}
b.hosp = c()
champ = 1
for (i in 1:10) {
if (!is.na(rate[i])){
message("rate[i]");
message(rate[i]);
message("rate[champ]")
message(rate[champ])
if (rate[i] == rate[champ]) {
message("rate[i] == rate[champ]");
b.hosp = append(b.hosp, i);
}
if (rate[i] < rate[champ]) {
message("rate[i] < rate[champ]")
champ = i;
b.hosp = c(i);
}
}
}
b.hosp
rate[6]
b.hosp = c()
champ = 1
for (i in 1:10) {
if (!is.na(rate[i])){
if (rate[i] == rate[champ]) {
b.hosp = append(b.hosp, i);
}
if (rate[i] < rate[champ]) {
champ = i;
b.hosp = c(i);
}
}
}
champ
n
for (i in 1:n) {
if (!is.na(rate[i])){
if (rate[i] == rate[champ]) {
b.hosp = append(b.hosp, i);
}
if (rate[i] < rate[champ]) {
champ = i;
b.hosp = c(i);
}
}
}
champ
rate[518]
b.hosp
h.names = c();
for (i in 1:length(b.hosp)) {
append(h.names, data["Hospital.Name"][i, 1])
}
sort(h.names)[1]
h.names = c();
for (i in 1:length(b.hosp)) {
append(h.names, outcome["Hospital.Name"][i, 1])
}
sort(h.names)[1]
h.names
h.names = c();
for (i in 1:length(b.hosp)) {
h.names = append(h.names, data["Hospital.Name"][i, 1])
}
sort(h.names)[1]
for (i in 1:1) message(i)
b.hosp
h.names = c();
for (i in 1:length(b.hosp)) {
h.names = append(h.names, data["Hospital.Name"][b.hosp[i], 1])
}
sort(h.names)[1]
outcome["Hospital.Name"][]
h.names = c();
for (i in 1:length(b.hosp)) {
h.names = append(h.names, outcome["Hospital.Name"][b.hosp[i], 1])
}
sort(h.names)[1]
outcome["Hospital.Name"][518, 1]
best <- function(state, outcome) {
## Read outcome data
data = read.csv("outcome-of-care-measures.csv", colClasses = "character");
idx = 0;
## Check that state and outcome are valid
if(outcome == "heart attack") idx = 11;
if(outcome == "heart failure") idx = 17;
if(outcome == "pneumonia") idx = 23;
if (idx == 0) stop("invalid outcome");
flag = FALSE;
states = data["State"][, 1]
for (item in states) {
if(item == state) {
flag = TRUE;
break;
}
}
if(!flag) stop("invalid state")
b.hosp = c();
rate = as.numeric(data[idx][, 1]);
n = length(rate)
champ = 1;
for (i in 1:n) {
if (!is.na(rate[i])){
if (rate[i] == rate[champ]) {
b.hosp = append(b.hosp, i);
}
if (rate[i] < rate[champ]) {
champ = i;
b.hosp = c(i);
}
}
}
h.names = c();
for (i in 1:length(b.hosp)) {
h.names = append(h.names, data["Hospital.Name"][b.hosp[i], 1])
}
sort(h.names)[1]
}
best("NY", "pneumonia")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
best("SC", "heart attack")
x = best("SC", "heart attack")
class(x)
submit()
b.hosp = (132, 543, 678, 1002)
b.hosp = c(132, 543, 678, 1002)
h.names = c();
for (i in 1:length(b.hosp)) {
h.names = append(h.names, outcome["Hospital.Name"][b.hosp[i], 1])
}
sort(h.names)[1]
h.names
x = best("SC", "heart attack")
x
outcome["State"][1,1]
outcome["State"][100,1]
submit()
submit()
submit
submit()
submit()
submit()
best("SC", "heart attack")
best <- function(state, outcome) {
## Read outcome data
data = read.csv("outcome-of-care-measures.csv", colClasses = "character");
idx = 0;
## Check that state and outcome are valid
if(outcome == "heart attack") idx = 11;
if(outcome == "heart failure") idx = 17;
if(outcome == "pneumonia") idx = 23;
if (idx == 0) stop("invalid outcome");
flag = FALSE;
states = data["State"][, 1]
for (item in states) {
if(item == state) {
flag = TRUE;
break;
}
}
if(!flag) stop("invalid state")
b.hosp = c();
rate = as.numeric(data[idx][, 1]);
n = length(rate)
champ = 1;
for (i in 1:n) {
if (!is.na(rate[i]) && data["State"][i,1] == state){
if (rate[i] == rate[champ]) {
b.hosp = append(b.hosp, i);
}
if (rate[i] < rate[champ]) {
champ = i;
b.hosp = c(i);
}
}
}
h.names = c();
for (i in 1:length(b.hosp)) {
h.names = append(h.names, data["Hospital.Name"][b.hosp[i], 1])
}
sort(h.names)[1]
}
best("SC", "heart attack")
